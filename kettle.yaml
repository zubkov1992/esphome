substitutions:
    devicename: kettle
    platform: ESP32
    board: nodemcu-32s

globals:
  - id: desired_water_temperature
    type: float
    initial_value: '100.0'
  - id: desired_water_id
    type: int
    initial_value: '0'
  - id: rgb_led_color
    type: int
    initial_value: '0'
  - id: water_ready
    type: bool
    initial_value: "false"

logger:

<< : !include .common.yaml

wifi:
    ssid: !secret wifi_ssid
    password: !secret wifi_passwd
    fast_connect: true

interval:
  - interval: 240s
    then:
      - switch.turn_on: ntc_vcc
      - component.update: source_sensor
      - switch.turn_off: ntc_vcc

switch:
  - platform: gpio
    id: relay
    pin: 
      number: GPIO22
      inverted: true
    restore_mode: ALWAYS_OFF
    internal: true
    on_turn_on:
      - while: 
          condition:
            switch.is_on: relay
          then:
            - switch.turn_on: ntc_vcc
            - component.update: source_sensor
            - switch.turn_off: ntc_vcc
            - delay: 15s
    on_turn_off:
      - light.turn_off: led_60
      - light.turn_off: led_70
      - light.turn_off: led_80
      - light.turn_off: led_90
      - delay: 40s
      - switch.turn_on: ntc_vcc
      - component.update: source_sensor
      - switch.turn_off: ntc_vcc

  - platform: gpio
    pin: 
      number: GPIO23
    id: ntc_vcc
    internal: true

  - platform: template
    id: boiled_water
    name: "boiled water"
    icon: "mdi:kettle-steam"
    lambda: |-
      if (id(relay).state && id(desired_water_temperature) == 100.0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        lambda: |-
          id(desired_water_temperature) = 100.0;
          id(desired_water_id) = 0;
          id(relay).turn_on();
          auto call = id(led_60).turn_on();
          call.perform();
          auto call1 = id(led_70).turn_on();
          call1.perform();
          auto call2 =  id(led_80).turn_on();
          call2.perform();
          auto call3 = id(led_90).turn_on();
          call3.perform();
    turn_off_action:
      - switch.turn_off: relay
      - globals.set:
          id: desired_water_id
          value: '0'

  - platform: template
    id: water_heating_90
    name: "water heating 90°C"
    icon: "mdi:kettle-steam-outline"
    lambda: |-
      if (id(relay).state && id(desired_water_temperature) == 86.0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        lambda: |-
          id(desired_water_temperature) = 86.0;
          id(relay).turn_on();
          auto call = id(led_60).turn_on();
          call.perform();
          auto call1 = id(led_70).turn_on();
          call1.perform();
          auto call2 =  id(led_80).turn_on();
          call2.perform();
          auto call3 = id(led_90).turn_on();
          call3.perform();
    turn_off_action:
      - switch.turn_off: relay
      - globals.set:
          id: desired_water_id
          value: '0'

  - platform: template
    id: water_heating_80
    name: "water heating 80°C"
    icon: "mdi:kettle-steam-outline"
    lambda: |-
      if (id(relay).state && id(desired_water_temperature) == 76.0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        lambda: |-
          id(desired_water_temperature) = 76.0;
          id(relay).turn_on();
          auto call = id(led_60).turn_on();
          call.perform();
          auto call1 = id(led_70).turn_on();
          call1.perform();
          auto call2 =  id(led_80).turn_on();
          call2.perform();
          auto call3 = id(led_90).turn_off();
          call3.perform();
    turn_off_action:
      - switch.turn_off: relay
      - globals.set:
          id: desired_water_id
          value: '0'

  - platform: template
    id: water_heating_70
    name: "water heating 70°C"
    icon: "mdi:kettle-steam-outline"
    lambda: |-
      if (id(relay).state && id(desired_water_temperature) == 66.0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        lambda: |-
          id(desired_water_temperature) = 66.0;
          id(relay).turn_on();
          auto call = id(led_60).turn_on();
          call.perform();
          auto call1 = id(led_70).turn_on();
          call1.perform();
          auto call2 =  id(led_80).turn_off();
          call2.perform();
          auto call3 = id(led_90).turn_off();
          call3.perform();
    turn_off_action:
      - switch.turn_off: relay
      - globals.set:
          id: desired_water_id
          value: '0'

  - platform: template
    id: water_heating_60
    name: "water heating 60°C"
    icon: "mdi:kettle-steam-outline"
    lambda: |-
      if (id(relay).state && id(desired_water_temperature) == 56.0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        lambda: |-
          id(desired_water_temperature) = 56.0;
          id(relay).turn_on();
          auto call = id(led_60).turn_on();
          call.perform();
          auto call1 = id(led_70).turn_off();
          call1.perform();
          auto call2 =  id(led_80).turn_off();
          call2.perform();
          auto call3 = id(led_90).turn_off();
          call3.perform();
    turn_off_action:
      - switch.turn_off: relay
      - globals.set:
          id: desired_water_id
          value: '0'


light:
    - platform: binary
      id: led_60
      output: out_led_60
      restore_mode: ALWAYS_OFF
      internal: true
    - platform: binary
      id: led_70
      output: out_led_70
      restore_mode: ALWAYS_OFF
      internal: true
    - platform: binary
      id: led_80
      output: out_led_80
      restore_mode: ALWAYS_OFF
      internal: true
    - platform: binary
      id: led_90
      output: out_led_90
      restore_mode: ALWAYS_OFF
      internal: true 
    - platform: binary
      id: led_red
      output: out_led_red
      restore_mode: ALWAYS_OFF
      internal: true
    - platform: binary
      id: led_green
      output: out_led_green
      restore_mode: ALWAYS_OFF
      internal: true
    - platform: binary
      id: led_blue
      output: out_led_blue
      restore_mode: ALWAYS_OFF
      internal: true

output:
    - platform: gpio
      id: out_led_60
      pin: 
        number: GPIO21
        inverted: true
    - platform: gpio
      id: out_led_70
      pin: 
        number: GPIO19
        inverted: true
    - platform: gpio
      id: out_led_80
      pin: 
        number: GPIO18
        inverted: true
    - platform: gpio
      id: out_led_90
      pin: 
        number: GPIO5
        inverted: true
    - platform: gpio
      id: out_led_red
      pin: 
        number: GPIO17
        inverted: true
    - platform: gpio
      id: out_led_green
      pin: 
        number: GPIO16
        inverted: true
    - platform: gpio
      id: out_led_blue
      pin: 
        number: GPIO4
        inverted: true

binary_sensor:
  - platform: gpio
    id: button_boiled_water
    pin:
      number: GPIO2
      mode: INPUT_PULLUP
      inverted: true
    internal: true
    on_click:
      then:
        lambda: |-
          if (id(relay).state) {
            if (id(boiled_water).state) id(boiled_water).turn_off();
            if (id(water_heating_60).state) id(water_heating_60).turn_off();
            if (id(water_heating_70).state) id(water_heating_70).turn_off();
            if (id(water_heating_80).state) id(water_heating_80).turn_off();
            if (id(water_heating_90).state) id(water_heating_90).turn_off();
          } else {
            id(boiled_water).turn_on();
          }

  - platform: gpio
    id: button_desired_wate
    pin:
      number: GPIO15
      mode: INPUT_PULLUP
      inverted: true
    internal: true
    on_click:
      then:
        lambda: |-
          if(id(desired_water_id) == 0) {
            id(desired_water_id) = 1;
            id(water_heating_60).turn_on();
          } else if (id(desired_water_id) == 1) {
            id(desired_water_id) = 2;
            id(water_heating_70).turn_on();
          } else if (id(desired_water_id) == 2) {
            id(desired_water_id) = 3;
            id(water_heating_80).turn_on();
          } else if (id(desired_water_id) == 3) {
            id(desired_water_id) = 0;
            id(water_heating_90).turn_on();
          }

sensor:
  - platform: ntc
    id: water_temperature
    name: water temperature
    sensor: resistance_sensor
    calibration:
      - 834Ohm -> 26°C
      - 1333Ohm -> 37°C
      - 18.7kOhm -> 100°C
    on_value:
      then:
      - delay: !lambda "if (id(water_temperature).state >= id(desired_water_temperature) && id(relay).state) return 1500; else return 0;"
      - lambda: |-
            if (id(water_temperature).state >= id(desired_water_temperature) && id(relay).state) { 
              id(water_ready) = true;
              if (id(boiled_water).state) id(boiled_water).turn_off();
              if (id(water_heating_60).state) id(water_heating_60).turn_off();
              if (id(water_heating_70).state) id(water_heating_70).turn_off();
              if (id(water_heating_80).state) id(water_heating_80).turn_off();
              if (id(water_heating_90).state) id(water_heating_90).turn_off();
            }

            if (id(water_temperature).state < 102.0 && id(water_temperature).state > 90.0 && id(rgb_led_color) != 6) {
              id(rgb_led_color) = 6;
              auto call = id(led_red).turn_on();
              call.perform();
              auto call1 = id(led_green).turn_off();
              call1.perform();
              auto call2 = id(led_blue).turn_off();
              call2.perform();
            } else if (id(water_temperature).state < 90.0 && id(water_temperature).state > 80.0 && id(rgb_led_color) != 5) {
              id(rgb_led_color) = 5;
              auto call = id(led_red).turn_on();
              call.perform();
              auto call1 = id(led_green).turn_on();
              call1.perform();
              auto call2 = id(led_blue).turn_off();
              call2.perform();
            } else if (id(water_temperature).state < 80.0 && id(water_temperature).state > 70.0  && id(rgb_led_color) != 4) {
              id(rgb_led_color) = 4;
              auto call = id(led_red).turn_on();
              call.perform();
              auto call1 = id(led_green).turn_off();
              call1.perform();
              auto call2 = id(led_blue).turn_on();
              call2.perform();
            } else if (id(water_temperature).state < 70.0 && id(water_temperature).state > 60.0  && id(rgb_led_color) != 3) {
              id(rgb_led_color) = 3;
              auto call = id(led_red).turn_off();
              call.perform();
              auto call1 = id(led_green).turn_off();
              call1.perform();
              auto call2 = id(led_blue).turn_on();
              call2.perform();
            } else if (id(water_temperature).state < 60.0 && id(water_temperature).state > 50.0  && id(rgb_led_color) != 2) {
              id(rgb_led_color) = 2;
              auto call = id(led_red).turn_off();
              call.perform();
              auto call1 = id(led_green).turn_on();
              call1.perform();
              auto call2 = id(led_blue).turn_on();
              call2.perform();
            } else if ((id(water_temperature).state < 50.0 && id(water_temperature).state > 40.0  && id(rgb_led_color) != 1) || (id(water_temperature).state < 50.0 && id(relay).state)) {
              id(rgb_led_color) = 1;
              auto call = id(led_red).turn_on();
              call.perform();
              auto call1 = id(led_green).turn_on();
              call1.perform();
              auto call2 = id(led_blue).turn_on();
              call2.perform();
            } else if (id(water_temperature).state < 40.0 && id(rgb_led_color) != 0 && !id(relay).state) {
              id(rgb_led_color) = 0;
              auto call = id(led_red).turn_off();
              call.perform();
              auto call1 = id(led_green).turn_off();
              call1.perform();
              auto call2 = id(led_blue).turn_off();
              call2.perform();
            }

      - if:
          condition:
            lambda: 'return id(water_ready);'
          then:
            - homeassistant.service:
                service: media_player.play_media
                data:
                  entity_id: media_player.yandex_station_ff98f029a042a416f78f601d
                  media_content_id: >-
                    <speaker audio="alice-sounds-things-water-2.opus"> sil <[500]>
                    Ч+айник гот+ов!
                  media_content_type: dialog
            - homeassistant.service:
                service: media_player.play_media
                data:
                  entity_id: media_player.yandex_station_ff98f029c9c2d300bbc49af5
                  media_content_id: >-
                    <speaker audio="alice-sounds-things-water-2.opus"> sil <[500]>
                    Ч+айник гот+ов!
                  media_content_type: dialog
            - globals.set:
                id: water_ready
                value: 'false'

  - platform: resistance
    id: resistance_sensor
    sensor: source_sensor
    resistor: 9.8kOhm
    configuration: DOWNSTREAM 
    internal: true
  - platform: adc
    id: source_sensor
    pin: GPIO34
    attenuation: 11db
    update_interval: never
    internal: true